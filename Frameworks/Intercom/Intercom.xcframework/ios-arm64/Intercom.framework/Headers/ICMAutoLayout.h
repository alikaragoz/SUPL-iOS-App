//
//  ICMAutoLayout.h
//  Pods
//
//  Created by James Treanor on 16/04/2015.
//
//

#import <UIKit/UIKit.h>

typedef NS_OPTIONS(NSUInteger, ICM_JRTViewPinEdges)
{
    /// Pins the top edge of an item.
    ICM_JRTViewPinTopEdge = 1 << 0,
    
    /// Pins the right edge of an item.
    ICM_JRTViewPinRightEdge = 1 << 1,
    
    /// Pins the bottom edge of an item.
    ICM_JRTViewPinBottomEdge = 1 << 2,
    
    /// Pins the left edge of an item.
    ICM_JRTViewPinLeftEdge = 1 << 3,
    
    /// Pins all edges of an item.
    ICM_JRTViewPinAllEdges = ~0UL
};

@interface ICMAutoLayout : NSObject

/**
 * @name Centering Views
 */

/**
 *  Centers the receiver in the superview on a specified axis.
 *
 *  @param axis The axis of the superview you wish to center the receiver in. This parameter accepts `NSLayoutAttributeCenterX` or `NSLayoutAttributeCenterY`.
 *
 *  @return The `NSLayoutConstraint` generated by this method.
 */
+(NSLayoutConstraint *)centerView:(UIView *)primaryView inContainerOnAxis:(NSLayoutAttribute)axis;

/**
 *  Centers the receiver in the superview on a specified axis.
 *
 *  @param axis The axis of the superview you wish to center the receiver in. This parameter accepts  `NSLayoutAttributeCenterX` or `NSLayoutAttributeCenterY`.
 *  @param constant Constraint constant value.
 *
 *  @return The `NSLayoutConstraint` generated by this method.
*/

+ (NSLayoutConstraint *)centerView:(UIView *)primaryView inContainerOnAxis:(NSLayoutAttribute)axis withConstant:(CGFloat)constant;

/**
 *  Centers the receiver in the superview on a specified axis.
 *
 *  @param axis The axis of the superview you wish to center the receiver in. This parameter accepts  `NSLayoutAttributeCenterX` or `NSLayoutAttributeCenterY`.
 *  @param constant Constraint constant value.
 *  @param priority Constraint priority value.
 *
 *  @return The `NSLayoutConstraint` generated by this method.
*/

+ (NSLayoutConstraint *)centerView:(UIView *)primaryView inContainerOnAxis:(NSLayoutAttribute)axis withConstant:(CGFloat)constant withPriority:(UILayoutPriority)priority;

/**
 * @name Constraining to a fixed size
 */

/**
 *  Constrains the receiver to a fixed size.
 *  @warning Setting an axis to 0.0 will result in no constraint being applied to that axis.
 *
 *  @param size The size to constrain the receiver to.
 *
 *  @return An array of `NSLayoutConstraint` objects generated by this method.
 */
+(NSArray *)constrainView:(UIView *)primaryView toSize:(CGSize)size;

/**
 *  Constrains the receiver to a fixed width.
 *
 *  @param width The width to constrain the receiver to
 *
 *  @return The `NSLayoutConstraint` generated by this method.
 */
+(NSLayoutConstraint *)constrainView:(UIView *)primaryView toWidth:(CGFloat)width;

/**
 *  Constrains the receiver to a fixed width.
 *
 *  @param width The width to constrain the receiver to
 *  @param priority The UILayoutPriority of the constraint
 *
 *  @return The `NSLayoutConstraint` generated by this method.
*/

+(NSLayoutConstraint *)constrainView:(UIView *)primaryView toWidth:(CGFloat)width withPriority:(UILayoutPriority)priority;

/**
 *  Constrains the receiver to a fixed height.
 *
 *  @param height The height to constrain the receiver to
 *
 *  @return The `NSLayoutConstraint` generated by this method.
 */
+(NSLayoutConstraint *)constrainView:(UIView *)primaryView toHeight:(CGFloat)height;

/**
 *  Constrains the receiver to a fixed height.
 *
 *  @param height The height to constrain the receiver to
 *  @param priority The UILayoutPriority of the constraint
 *
 *  @return The `NSLayoutConstraint` generated by this method.
*/
+ (NSLayoutConstraint *)constrainView:(UIView *)primaryView toHeight:(CGFloat)height withPriority:(UILayoutPriority)priority;

/**
 * @name Pinning to other items
 */

/**
 *  Pins an attribute to any valid attribute of the peer item. The item may be the layout guide of a view controller.
 *
 *  @param attribute     The attribute of the receiver that you want to pin.
 *  @param toAttribute   The attribute of the `peerView` that you want to pin.
 *  @param peerItem      The item that you want to pin the receiver to. (either `UIView` or `UILayoutSupport`).
 *
 *  @return The `NSLayoutConstraint` generated by this method.
 */
+(NSLayoutConstraint *)pinView:(UIView *)primaryView attribute:(NSLayoutAttribute)attribute toAttribute:(NSLayoutAttribute)toAttribute ofItem:(id)peerItem;

/**
 *  Pins an attribute to any valid attribute of the peer item. The item may be the layout guide of a view controller. Provide a constant for offset/inset.
 *
 *  @param attribute     The attribute of the receiver that you want to pin.
 *  @param toAttribute   The attribute of the `peerView` that you want to pin.
 *  @param peerItem      The item that you want to pin the receiver to. (either `UIView` or `UILayoutSupport`).
 *  @param constant      The constant that you want to apply to the constraint.
 *
 *  @return The `NSLayoutConstraint` generated by this method.
 */
+(NSLayoutConstraint *)pinView:(UIView *)primaryView attribute:(NSLayoutAttribute)attribute toAttribute:(NSLayoutAttribute)toAttribute ofItem:(id)peerItem withConstant:(CGFloat)constant;

/**
 *  Pins an attribute to any valid attribute of the peer item. The item may be the layout guide of a view controller. Provide a constant for offset/inset along with a relation.
 *
 *  @param attribute     The attribute of the receiver that you want to pin.
 *  @param toAttribute   The attribute of the `peerView` that you want to pin.
 *  @param peerItem      The item that you want to pin the receiver to. (either `UIView` or `UILayoutSupport`).
 *  @param constant      The constant that you want to apply to the constraint.
 *  @param relation      The relation that you wish to apply to the constraint.
 *
 *  @return The `NSLayoutConstraint` generated by this method.
 */
+(NSLayoutConstraint *)pinView:(UIView *)primaryView attribute:(NSLayoutAttribute)attribute toAttribute:(NSLayoutAttribute)toAttribute ofItem:(id)peerItem withConstant:(CGFloat)constant relation:(NSLayoutRelation)relation;

/**
 *  Pins the receivers edge(s) to another views edge(s). Both views must be in the same view hierarchy.
 *
 *  @param edges    The edges that should be pinned to the peerView's edges.
 *  @param peerView The view that the receiver is being pinned to.
 *
 *  @return An array of `NSLayoutConstraint` objects generated by this method.
 */
+(NSArray *)pinView:(UIView *)primaryView edges:(ICM_JRTViewPinEdges)edges toSameEdgesOfView:(UIView *)peerView;

/**
 *  Pins the receivers edge(s) to another views edge(s). Both views must be in the same view hierarchy.
 *
 *  @param edges    The edges that should be pinned to the peerView's edges.
 *  @param peerView The view that the receiver is being pinned to.
 *  @param inset    The inset that is applied to the attributes.
 *
 *  @return An array of `NSLayoutConstraint` objects generated by this method.
 */
+(NSArray *)pinView:(UIView *)primaryView edges:(ICM_JRTViewPinEdges)edges toSameEdgesOfView:(UIView *)peerView inset:(CGFloat)inset;

/**
 *  Pins the receivers edge(s) to another views edge(s). Both views must be in the same view hierarchy.
 *
 *  @param edges    The edges that should be pinned to the peerView's edges.
 *  @param peerView The view that the receiver is being pinned to.
 *  @param inset    The inset that is applied to the attributes.
 *  @param priority The resulting constraints' priorities.
 *
 *  @return An array of `NSLayoutConstraint` objects generated by this method.
*/
+ (NSArray *)pinView:(UIView *)primaryView edges:(ICM_JRTViewPinEdges)edges toSameEdgesOfView:(UIView *)peerView inset:(CGFloat)inset withPriority:(UILayoutPriority)priority;

@end
